Javascript new05_testbranch01_02

Brendon eich
earlier livescript> netscape+sun>javascript
make static into dynamic webpages


Javascript is lightwieght and cross platform client side scripting
Its used for frontend validations and interacting with html elements

object based >no support for polymorphism n inheritance
inbuilt objects


Javascript can change HTML content,attributes,css style,hide and see hidden elements.
Javascript can be added in head,body,external file,folder,url


variables
 var message;  ...............no need for datatype ...it can be variable to hold any value ...num,string etc
 
 REPL
 browsers> console> Read Eval Print Loop
 
 chrome
>>
 alert('hi');
 console.log('hi');
 
cnt+ L >>clear console
---
IE 11
F12 >>multi line>>run script

==============================
Datatypes

1. Primitive ->  String,Number,Boolean
2. Object -> functions ,object
3. Null -> special >represents no object
4. Undefined >not primitive or object >special type >abscence of value

console> 
var x;
undefined ....after evaluation of expression

var y=null;
undefined

y;
null .........does not point to valid object....not abscense of value

======================================

Var can change the type 
typeof  >>to check type of var

var z=3;
typeof z;
number

z="heello"
typeof z;
string
--------------------------
BLOCK SCOPE>> Var within block can be used anywhere
{
var x=0;
}
//x can be used outside


Redeclaring a variable inside a block will also redeclare the variable outside the block:

Example
var x = 10;
// Here x is 10
{ 
  var x = 2;
  // Here x is 2
}
// Here x is 2
---------------------------

BLOCK SCOPE>> let within block cannot be used outside block 

{ 
  let x = 2;
}
// x can NOT be used here


Redeclaring a variable using the let keyword   will not redeclare the variable outside the block:
var x = 10;
// Here x is 10
{ 
  let x = 2;
  // Here x is 2
}
// Here x is 10

--------------------------
Global and Function scope
Similar for both var and let
-----------------------
Redeclaration :-
Redeclaring a var variable var is allowed
Redeclaring a var variable with let, in the SAME scope/ block, is not allowed:
Redeclaring a var or let variable to const, in the same scope/ block, is not allowed:
Redeclaring a let variable with var , in the same scope/ block, is not allowed:
Redeclaring a let variable with let, in the same scope/ block, is not allowed:
Redeclaring a const variable with const, in the same scope/ block, is not allowed:

var x = 2;       // Allowed
let x = 3;       // Not allowed

{
  var x = 4;   // Allowed
  let x = 5   // Not allowed
}

Redeclaring a variable with let/const, in another scope, or in another block, is allowed:

Example
let x = 2;       // Allowed

{
  let x = 3;   // Allowed
}

{
  let x = 4;   // Allowed
}
-----------------------------------

const

--Cannot reassign primitive values but array n object values can be changed but not entire array/object

Variables defined with const behave like let variables, except they cannot be reassigned:

Example
const PI = 3.141592653589793;
PI = 3.14;      // This will give an error
PI = PI + 10;   // This will also give an error

we CANNOT change constant PRIMITIVE VALUES, 
but we CAN change the PROPERTIES of CONSTANT OBJECTS.
But you can NOT reassign a constant object:

// You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};

car.color = "red";// You can change a property:

car = {type:"Volvo", model:"EX60", color:"red"};    // ERROR


You can change the elements of a constant array:
But you can NOT reassign a constant array:
----------------------------------
HOISTING
Hoisting is JavaScript's default behavior of moving declarations to the top.
In JavaScript, a variable can be declared after it has been used.
JavaScript only hoists declarations, not initializations.
Variables and constants declared with let or const are not hoisted!

==============================


Scripting>>

	JS interpretor >>part of browser >> to run js in webpage>>reads & executes statment by statemnet

no need to write method /main ...direct script...

Functional  >>
functions given hiher priority ....treated as data....var may hold fun as value

Object oriented >>
not class  based but prototype lang

Dynamically typed >>
type decided at runtime by interpretor 


==================












